package components

import (
    "timeliner/internal/models"
    "strconv"

)

templ Events(incident_id int64, events []*models.Event) {
    <div class="events-list" id="events-list">
    <h1>Events</h1>
    if events == nil || len(events) < 1 {
        <p>No Events</p>
    } else {
        /*
        <ul id="events-list-ul">
        for _, event := range events {
            <li>{event.EventType}:{utcTime(event.EventTime)}</li>
        }
        </ul>
        */
        for _, event := range events {
            <div class="event border rounded my-2 p-2" id={"event-" + strconv.FormatInt(event.ID, 10)}
                hx-get={"/incident/" + strconv.FormatInt(incident_id, 10) + "/event/" + strconv.FormatInt(event.ID, 10) + "/details"}
                hx-target="#myModal"
                hx-swap="innerHTML"
                data-bs-toggle="modal"
                data-bs-target="#myModal"
                >
                <h5>{event.EventType}</h5>
                <p>{utcTime(event.EventTime)}</p>

            </div>
        }
    }

    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#myModal"
        hx-get={"/incident/" + strconv.FormatInt(incident_id, 10) + "/events/new"}
        hx-target="#myModal"
        hx-swap="innerHTML"
    >New Event</button>
    // close modal if open when successfully updated
    <script>
        var modal = document.getElementById('myModal');
        if (modal) {
            var modal = bootstrap.Modal.getInstance(modal);
            modal.hide();
        }
    </script>
    </div>

}

templ NewEvent(id int64) {
    <div class="modal-dialog">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">New Event</h4>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>

            <form id="new-event"
                hx-post={"/incident/" + strconv.FormatInt(id, 10) + "/events/new"}
                    hx-trigger="submit"
                    hx-target="#events-list"
                    hx-swap="innerHTML">
            <!-- Modal body -->
                <div class="modal-body">
                    /*
                    <label for="event-name" class="form-label">Name</label>
                    <input type="text" class="form-control" id="event-name" name="event-name" required>
                    */
                    // TODO adjust for UTC time/add timezone picker
                    <label for="event-time" class="form-label">Event Time (Local)</label>
                    <input type="datetime-local" class="form-control" id="event-time" name="event-time" required>

                    <label for="event-type" class="form-label">Event Type</label>
                    <input type="text" class="form-control" id="event-type" name="event-type" required>

                    <label for="event-endpoint" class="form-label">Endpoint</label>
                    <div class="input-group">
                        <select class="form-select" aria-label="Endpoint Select" name="event-endpoint" id="event-endpoint-select" 
                            aria-describedby="new-event-new-endpoint-button"
                            hx-get={"/incident/" + strconv.FormatInt(id, 10) + "/endpoints/list"}
                            hx-trigger="mouseover"
                            hx-target="#event-endpoint-select"
                            hx-swap="innerHTML"
                            >
                            <div id="placeholder"></div>
                        </select>
                        <div
                            hx-get={"/incident/" + strconv.FormatInt(id, 10) + "/endpoints/list"}
                            hx-trigger="load"
                            hx-target="#event-endpoint-select"
                            hx-swap="innerHTML"></div>
                        <button class="btn btn-outline-secondary" type="button" id="new-event-new-endpoint-button"
                            hx-get={"/incident/" + strconv.FormatInt(id, 10) + "/endpoints/new-inline"}
                            hx-trigger="click"
                            hx-target="#new-event-new-endpoint"
                            hx-swap="innerHTML"
                        >New Endpoint</button>
                    </div>
                    <div id="new-event-new-endpoint" class="my-3"></div>

                    <label for="event-description" class="form-label">Description</label>
                    <textarea name="event-description" id="event-description" class="form-control"></textarea>
                    @NewEventIOCs()
                </div>
                
                <div class="modal-footer">
                    <button class="btn btn-primary" id="new-event-submit" type="submit">Submit
                        <div
                            hx-get={"/incident/" + strconv.FormatInt(id, 10) + "/endpoints"}
                            hx-trigger="click from:#new-event-submit"
                            hx-target="#endpointCards"
                            hx-swap="innerHTML"
                        ></div>
                    </button>
                </div>
            </form>
        </div>
    </div>
}

templ NewEventIOCs() {
    <label for="new-iocs" class="form-label">IOCs</label>
    <div id="new-iocs">
        <div class="input-group" id="ioc">
            <select name="ioc-type" id="ioc-type" class="form-select d-inline w-25">
                <option value="ip_address">IP Address</option>
                <option value="domain">Domain</option>
                <option value="file_name">File Name or Path</option>
                <option value="email">Email</option>
                <option value="process">Process Name or Path</option>
                <option value="registry">Registry Path or Key Value</option>
            </select>
            <input type="text" aria-label="ioc" class="form-control" name="ioc-value">
        </div>
    </div>
    <button type="button" class="btn btn-secondary" onclick="addIOC()">Add IOC</button>
    <script>
        function addIOC() {
            var iocs = document.getElementById('ioc');
            var new_ioc = document.createElement('div');
            new_ioc.className = 'ioc';
            new_ioc.innerHTML = `
            <div class="input-group" id="ioc">
                    <select name="ioc-type" id="ioc-type" class="form-select d-inline w-25">
                        <option vlaue="ip_address">IP Address</option>
                        <option value="domain">Domain</option>
                        <option value="file_name">File Name or Path</option>
                        <option value="email">Email</option>
                        <option value="process">Process Name or Path</option>
                        <option value="registry">Registry Path or Key Value</option>
                    </select>
                    <input type="text" aria-label="ioc" class="form-control" name="ioc-value">
                </div> 
            `;
            iocs.appendChild(new_ioc);

        }
    </script>
}

templ TimelineEvent(incident_id int64, eventDetails []*models.EventDetails) {
    if events == nil || len(eventDetails) < 1 {
        <p>No events</p>
    } else {
        for _, event := range eventDetails {
            /*<li class="timeline-item mb-5"
                data-bs-toggle="modal" data-bs-target="#myModal"
                hx-get={"/incident/" + strconv.FormatInt(incident_id, 10) + "/event/" + strconv.FormatInt(event.Event.ID, 10) + "/details"}
                hx-target="#myModal"
                hx-swap="innerHTML"
            >*/
            <li class="timeline-item mb-5" data-bs-toggle="collapse"
                data-bs-target={"#eventCollapse" + strconv.FormatInt(event.Event.ID, 10)}
                aria-expanded="false" aria-controls={"#eventCollapse" + strconv.FormatInt(event.Event.ID, 10)}>
                <div class="timeline-header d-inline-flex">
                    <h5 class="fw-bold">{event.Event.EventType}</h5>
                    <p class="text-muted mb-2 mx-3">{len(event.Comments)} Comments</p>
                </div>
                <p class="text-muted mb-2 fw-bold">{utcTime(event.Event.EventTime)} UTC</p>
                //<ul>
                if event.IOCs != nil && len(event.IOCs) > 0 {
                    for _, ioc := range event.IOCs {
                    //<li>{ioc.IocType} {ioc.Value}</li>
                    <p class="mb-2">{ioc.IocDescription} {ioc.Value}</p>
                }
                }
                
            </li>
            <div class="collapse" id={"eventCollapse" + strconv.FormatInt(event.Event.ID, 10)}>
                <div class="comments" id={"eventComments-" + strconv.FormatInt(event.Event.ID, 10)}>
                    @Comments(incident_id, event)
                </div>

            </div>
        }
    }
}

templ Comments(incident_id int64, event *models.EventDetails) {
    if event.Comments != nil && len(event.Comments) > 0 {
            <ul>
            for _, comment := range event.Comments {
                <li id={"comment-" + strconv.FormatInt(comment.ID, 10)}>
                    <div class="d-inline-flex">
                        <p class="p-2 flex-grow-1">{comment.Comment}</p>
                        <p class="p-2">From {comment.UserName}</p>
                    </div>
                </li>
            }
            </ul>
        }
        <form 
            hx-post={"/incident/" + strconv.FormatInt(incident_id, 10) + "/event/" + strconv.FormatInt(event.Event.ID, 10) + "/new-comment"}
            hx-target={"#eventComments-" + strconv.FormatInt(event.Event.ID, 10)}
            hx-swap="innerHTML"
        >
            <textarea name="new-comment" id="new-comment"></textarea>
            <button class="btn btn primary" id="submit-comment" type="submit">Add Comment</button>
        </form>
}


templ EventDetails(incident_id int64, event *models.EventDetails) {
    <div class="modal-dialog">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">{event.Event.EventType}</h4>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <!-- Modal body -->
                <div class="modal-body">
                    <h5>IOCs</h5>
                    if event.IOCs == nil || len(event.IOCs) < 1 {
                        <p>No IOCs</p>
                    }
                    for _, ioc := range event.IOCs {
                        <p>{ioc.IocDescription} {ioc.Value}</p>
                    }
                    <h5>Comments</h5>
                    <div class="comments" id={"eventComments-" + strconv.FormatInt(event.Event.ID, 10)}>
                        @Comments(incident_id, event)
                    </div>
                </div>
                

        </div>
    </div>

}